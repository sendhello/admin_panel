version: '3.8'

services:
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:15.2
    networks:
      - network
    expose:
      - "5432"
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: 123qwe
      POSTGRES_DB: movies_database
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d movies_database" ]
      interval: 5s
      timeout: 5s
      retries: 5

  django:
    container_name: django
    hostname: django
    build: ./movies_admin
    expose:
      - "8000"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: movies_database
      DB_USER: app
      DB_PASSWORD: 123qwe
      SECRET_KEY: django-insecure-5twg4p+jh)vqc3o4nrcsw24^*(o4(ftexu6ly3jr@z2w*kql&7
      DEBUG: False
      ALLOWED_HOSTS: '*'
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_PASSWORD: admin
      DJANGO_SUPERUSER_EMAIL: example@example.com
    volumes:
      - static_volume:/opt/app/static
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/admin" ]
      interval: 60s
      timeout: 10s
      retries: 10
      start_period: 5s

  sqlite_to_postgres:
    container_name: sqlite_to_postgres
    hostname: sqlite_to_postgres
    build: ./sqlite_to_postgres
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: movies_database
      DB_USER: app
      DB_PASSWORD: 123qwe
      SQLITE_DB: db.sqlite
      LOAD_PACKAGE_SIZE: 50
    volumes:
      - ./sqlite_to_postgres/db.sqlite:/opt/app/db.sqlite
    depends_on:
      django:
        condition: service_healthy
    networks:
      - network

  nginx:
    container_name: nginx
    hostname: nginx
    image: nginx:1.19.2
    volumes:
      - ./src/nginx.conf:/etc/nginx/nginx.conf
      - ./src/configs:/etc/nginx/conf.d
      - static_volume:/opt/app/static
    depends_on:
      - django
    ports:
      - "80:80"
    networks:
      - network

  swagger:
    container_name: swagger
    hostname: swagger
    image: swaggerapi/swagger-ui
    environment:
      SWAGGER_JSON: /swagger.yaml
      SWAGGER_HOST: nginx
      SWAGGER_PORT: 80
    volumes:
      - ./openapi.yaml:/swagger.yaml
    depends_on:
      - django
    ports:
      - "8080:8080"
    networks:
      - network

volumes:
  postgres_data:
  static_volume:

networks:
  network: